## Snake Game - A simple Pygame implementation
## Designed to run on AWS Ubuntu server with X11 forwarding

#!/usr/bin/env python3
"""
Snake Game - A simple Pygame implementation
Designed to run on AWS Ubuntu server with X11 forwarding
"""

import pygame
import sys
import random
import time

# Initialize pygame
pygame.init()

# Game constants
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
GRID_SIZE = 20
GRID_WIDTH = SCREEN_WIDTH // GRID_SIZE
GRID_HEIGHT = SCREEN_HEIGHT // GRID_SIZE
SNAKE_SPEED = 10  # Frames per second

# Colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
GRAY = (128, 128, 128)

# Direction constants
UP = (0, -1)
DOWN = (0, 1)
LEFT = (-1, 0)
RIGHT = (1, 0)

class Snake:
    def __init__(self):
        self.reset()

    def reset(self):
        # Start with a snake of length 3 in the middle of the screen
        self.length = 3
        self.positions = [(GRID_WIDTH // 2, GRID_HEIGHT // 2)]
        for i in range(1, self.length):
            self.positions.append((self.positions[0][0], self.positions[0][1] + i))
        self.direction = UP
        self.score = 0
        self.last_update_time = 0
        self.move_delay = 0.1  # Time in seconds between moves

    def update(self):
        current_time = time.time()
        if current_time - self.last_update_time > self.move_delay:
            self.last_update_time = current_time

            # Calculate new head position
            head_x, head_y = self.positions[0]
            dir_x, dir_y = self.direction
            new_head = ((head_x + dir_x) % GRID_WIDTH, (head_y + dir_y) % GRID_HEIGHT)

            # Check for collision with self
            if new_head in self.positions:
                return False  # Game over

            # Move the snake
            self.positions.insert(0, new_head)
            if len(self.positions) > self.length:
                self.positions.pop()

        return True

    def grow(self):
        self.length += 1
        self.score += 10
        # Speed up slightly as snake grows
        if self.move_delay > 0.05:
            self.move_delay -= 0.002

    def change_direction(self, new_direction):
        # Prevent 180-degree turns
        if (new_direction[0] * -1, new_direction[1] * -1) != self.direction:
            self.direction = new_direction

    def draw(self, surface):
        for i, (x, y) in enumerate(self.positions):
            # Draw head in a different color
            color = BLUE if i == 0 else GREEN
            pygame.draw.rect(surface, color, pygame.Rect(
                x * GRID_SIZE, y * GRID_SIZE, GRID_SIZE, GRID_SIZE))

            # Draw eyes on the head
            if i == 0:
                # Determine eye positions based on direction
                if self.direction == UP:
                    left_eye = (x * GRID_SIZE + 5, y * GRID_SIZE + 5)
                    right_eye = (x * GRID_SIZE + GRID_SIZE - 5, y * GRID_SIZE + 5)
                elif self.direction == DOWN:
                    left_eye = (x * GRID_SIZE + 5, y * GRID_SIZE + GRID_SIZE - 5)
                    right_eye = (x * GRID_SIZE + GRID_SIZE - 5, y * GRID_SIZE + GRID_SIZE - 5)
                elif self.direction == LEFT:
                    left_eye = (x * GRID_SIZE + 5, y * GRID_SIZE + 5)
                    right_eye = (x * GRID_SIZE + 5, y * GRID_SIZE + GRID_SIZE - 5)
                else:  # RIGHT
                    left_eye = (x * GRID_SIZE + GRID_SIZE - 5, y * GRID_SIZE + 5)
                    right_eye = (x * GRID_SIZE + GRID_SIZE - 5, y * GRID_SIZE + GRID_SIZE - 5)

                pygame.draw.circle(surface, BLACK, left_eye, 2)
                pygame.draw.circle(surface, BLACK, right_eye, 2)

class Food:
    def __init__(self):
        self.position = (0, 0)
        self.spawn()

    def spawn(self):
        self.position = (random.randint(0, GRID_WIDTH - 1),
                         random.randint(0, GRID_HEIGHT - 1))

    def draw(self, surface):
        x, y = self.position
        pygame.draw.rect(surface, RED, pygame.Rect(
            x * GRID_SIZE, y * GRID_SIZE, GRID_SIZE, GRID_SIZE))

class Game:
    def __init__(self):
        # Set up display with double buffering for smoother rendering
        self.display = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT), pygame.DOUBLEBUF)
        pygame.display.set_caption('Snake Game')
        self.clock = pygame.time.Clock()
        self.font = pygame.font.SysFont('Arial', 24)
        self.big_font = pygame.font.SysFont('Arial', 48)

        self.snake = Snake()
        self.food = Food()
        self.game_over = False

    def handle_events(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                if self.game_over:
                    if event.key == pygame.K_r:
                        self.reset_game()
                    elif event.key == pygame.K_q:
                        pygame.quit()
                        sys.exit()
                else:
                    if event.key == pygame.K_UP:
                        self.snake.change_direction(UP)
                    elif event.key == pygame.K_DOWN:
                        self.snake.change_direction(DOWN)
                    elif event.key == pygame.K_LEFT:
                        self.snake.change_direction(LEFT)
                    elif event.key == pygame.K_RIGHT:
                        self.snake.change_direction(RIGHT)

    def update(self):
        if not self.game_over:
            # Update snake position
            if not self.snake.update():
                self.game_over = True
                return

            # Check if snake ate food
            if self.snake.positions[0] == self.food.position:
                self.snake.grow()
                # Ensure food doesn't spawn on snake
                while True:
                    self.food.spawn()
                    if self.food.position not in self.snake.positions:
                        break

    def draw(self):
        self.display.fill(BLACK)

        # Draw grid lines for better visibility
        for x in range(0, SCREEN_WIDTH, GRID_SIZE):
            pygame.draw.line(self.display, GRAY, (x, 0), (x, SCREEN_HEIGHT), 1)
        for y in range(0, SCREEN_HEIGHT, GRID_SIZE):
            pygame.draw.line(self.display, GRAY, (0, y), (SCREEN_WIDTH, y), 1)

        # Draw snake and food
        self.snake.draw(self.display)
        self.food.draw(self.display)

        # Draw score
        score_text = self.font.render(f'Score: {self.snake.score}', True, WHITE)
        self.display.blit(score_text, (10, 10))

        # Draw game over screen
        if self.game_over:
            game_over_text = self.big_font.render('GAME OVER', True, WHITE)
            restart_text = self.font.render('Press R to Restart or Q to Quit', True, WHITE)

            self.display.blit(game_over_text,
                             (SCREEN_WIDTH // 2 - game_over_text.get_width() // 2,
                              SCREEN_HEIGHT // 2 - game_over_text.get_height() // 2))
            self.display.blit(restart_text,
                             (SCREEN_WIDTH // 2 - restart_text.get_width() // 2,
                              SCREEN_HEIGHT // 2 + game_over_text.get_height()))

        pygame.display.flip()

    def reset_game(self):
        self.snake.reset()
        self.food.spawn()
        self.game_over = False

    def run(self):
        while True:
            self.handle_events()
            self.update()
            self.draw()
            self.clock.tick(SNAKE_SPEED)  # Control game speed

if __name__ == "__main__":
    try:
        game = Game()
        game.run()
    except Exception as e:
        print(f"Error: {e}")
        pygame.quit()
        sys.exit(1)
